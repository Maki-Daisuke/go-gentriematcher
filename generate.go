package triematcher

import (
	"io"
	"text/template"
)

var templateFile = template.Must(template.New("file").Parse(`
// DO NOT EDIT!
// Code generated by go-triematcher <https://github.com/Maki-Daisuke/go-triematcher>
// DO NOT EDIT!

package {{ .PackageName }}

func Match{{ .TagName }}String(str string) bool {
  return Match{{ .TagName}}(([]byte)(str))
}

func Match{{ .TagName }}(bytes []byte) bool {
  defer func(){
    recover() // Must be "index out of range" error for string.
              // Ignore and return false.
  }()

  i := 0

  goto STATE_{{ with index .States 0 }}{{ .Id }}{{ end }}
{{ range .States }}
  STATE_{{ .Id }}:
  {{ if .IsGoal }}
      return i == len(bytes)
  {{ else }}
    switch bytes[i] {
    {{ range $key, $next := .Nexts }}
	case {{ printf "%q" $key }}:
        i++
        goto STATE_{{ $next.Id }}
    {{ end }}
      default:
        return false
    }
  {{ end }}
{{ end }}
}
`))

func generate(w io.Writer, pkg_name, tag_name string, st *state) error {
	err := templateFile.Execute(w, map[string]interface{}{
		"PackageName": pkg_name,
		"TagName":     tag_name,
		"States":      allStates(st),
	})
	if err != nil {
		return err
	} else {
		return nil
	}
}
